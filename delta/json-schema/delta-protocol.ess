namespace Lion.WebCore.Serialization
{
	// 0. Basic Definitions -----
	
	// class NodeId: string {}
	// class TargetNode: NodeId {}
	// class CommandId: NodeId {}
	// class QueryId: NodeId {}
	// class FreeId: NodeId {}
	// class MessageKind: NodeId {}
	// class MessageDataKey: NodeId {}

	class CommandSource
	{
		string Source; // NodeId
	}
	class DeltaSerializationChunk
	{
		List<SerializedNode> Nodes;
	}
	class SerializedNode
	{
		string Id;
		MetaPointer Classifier;
		List<SerializedProperty> Properties;
		List<SerializedContainment> Containments;
		List<SerializedReference> References;
		List<string> Annotations;
		string? Parent;
	}
	class ProtocolMessage
	{
		string Kind; // MessageKind
		string Message;
		List<ProtocolMessageData> Data;
	}
	class ProtocolMessageData
	{
		string Key; // MessageDataKey
		string Value;	
	}
	class DeltaProperty
	{
		string Parent; // TargetNode
		MetaPointer Property;
	}
	class MetaPointer
	{ 
		string Language;
		string Version; 
		string Key;
	}
	class SerializedProperty
	{
	   MetaPointer Property;
	   string? Value;
	}
	class SerializedContainment
	{
		MetaPointer Containment;
		List<string> Children;
	}
	class SerializedReferenceTarget
	{
		string? ResolveInfo;
		string? Reference;
	}
	class SerializedReference
	{
		MetaPointer Reference;
		List<SerializedReferenceTarget> Targets;
	}
	
	
	class DeltaContainment 
	{
		string Parent; //TargetNode
		MetaPointer Containment;
		int Index; // Index
	}
	class DeltaAnnotation
	{
		string Parent; //TargetNode
		int Index; // Index
	}
	class DeltaReference
	{
		string Parent; //TargetNode
		MetaPointer Reference;
		int Index; // Index
	}
	class IDeltaContent
	{
		ProtocolMessage? Message;
	}	
	
	// 1. Query -----
	class IDeltaQuery 
	{
		string QueryId; // QueryId
	}
	class IDeltaQueryRequest: IDeltaQuery {}
	class IDeltaQueryResponse: IDeltaQuery {}
	
	class DeltaQueryBase : IDeltaQuery
	{
		// string QueryId; // QueryId
		ProtocolMessage? Message;
	}
	
	class SubscribePartitionsRequest : DeltaQueryBase
	{
		bool Creation;
		bool Deletion;
		bool Partitions;
		// string QueryId; // QueryId
		// ProtocolMessage? Message;
	}
	class SubscribePartitionsResponse: DeltaQueryBase
	{
		// string QueryId; // QueryId
		// ProtocolMessage? Message;
	}
	class SubscribePartitionRequest 
	{
		string Partition; // TargetNode
		// string QueryId; // QueryId
		// ProtocolMessage? Message;
	}
	class SubscribePartitionResponse
	{
		DeltaSerializationChunk Contents;
		// string QueryId; // QueryId
		// ProtocolMessage? Message;
	}
	class UnsubscribePartitionResponse
	{
		// string QueryId; // QueryId
		// ProtocolMessage? Message;
	}
	class GetAvailableIdsRequest
	{
		int Count;
		// string QueryId; // QueryId
		// ProtocolMessage? Message;
	}
	class GetAvailableIdsResponse
	{
		List<string> Ids;  // List<FreeId>
		// string QueryId; // QueryId
		// ProtocolMessage? Message;
	}
	
	// 2. Command -----
	class IDeltaCommand : IDeltaContent {}
	class ISingleDeltaCommand : IDeltaCommand
	{
		string CommandId; //CommandId
	}
	class CommandResponse : IDeltaContent
	{
		// string CommandId; //CommandId
		// ProtocolMessage? Message;
	}
	class IPartitionCommand: ISingleDeltaCommand {}
	
	class AddPartition : IPartitionCommand
	{	
		DeltaSerializationChunk NewPartition;
		// string CommandId; //CommandId
		// ProtocolMessage? Message;
	}
	class DeletePartition : IPartitionCommand
	{
		string DeletedPartition; // TargetNode
		// string CommandId; //CommandId
		// ProtocolMessage? Message;
	}
	class INodeCommand: ISingleDeltaCommand {}
	
	class ChangeClassifier :INodeCommand
	{
		string Node; // TargetNode
		MetaPointer NewClassifier;
		// string CommandId; //CommandId
		// ProtocolMessage? Message;
	}
	class IFeatureCommand: ISingleDeltaCommand {}
	class IPropertyCommand: IFeatureCommand
	{
		DeltaProperty Propert;
		string Parent; //TargetNode
	}
	class AddProperty
	{
		DeltaProperty Property;
		string NewValue; // PropertyValue
		string CommandId; //CommandId
		ProtocolMessage? Message;
	}
	class DeleteProperty : IPropertyCommand
	{
		DeltaProperty Property;
		// string CommandId; //CommandId
		// ProtocolMessage? Message;
	}
	class IContainmentCommand : IFeatureCommand {}
	
	class AddChild
	{
		DeltaContainment Containment;
		DeltaSerializationChunk NewChild;
		// string CommandId; //CommandId
		// ProtocolMessage? Message;
	}
	class DeleteChild : IContainmentCommand
	{
		DeltaContainment Containment;
		// string CommandId; //CommandId
		// ProtocolMessage? Message;
	}
	class ReplaceChild : IContainmentCommand
	{
		DeltaContainment Containment;
		DeltaSerializationChunk NewChild;
		// string CommandId; //CommandId
		// ProtocolMessage? Message;
	}
	class MoveChildFromOtherContainment : IContainmentCommand
	{
		DeltaContainment NewContainment;
		string MovedChild; //TargetNode
		// string CommandId; //CommandId
		// ProtocolMessage? Message;
	}
	class MoveChildFromOtherContainmentInSameParent : IContainmentCommand
	{
		MetaPointer NewContainment;
		int NewIndex; //Index
		string MovedChild; //TargetNode
		// string CommandId; //CommandId
		// ProtocolMessage? Message;
	}
	class MoveChildInSameContainment : IContainmentCommand
	{
		int NewIndex; //Index
		string MovedChild; //TargetNode
		// string CommandId; //CommandId
		// ProtocolMessage? Message;
	}
	class MoveAndReplaceChildFromOtherContainment : IContainmentCommand
	{
		DeltaContainment NewContainment;
		string MovedChild; //TargetNode
		// string CommandId; //CommandId
		// ProtocolMessage? Message;
	}
	class MoveAndReplaceChildFromOtherContainmentInSameParent : IContainmentCommand
	{
		MetaPointer NewContainment;
		int NewIndex; //Index
		string MovedChild; //TargetNode
		// string CommandId; //CommandId
		// ProtocolMessage? Message;
	}
	class MoveAndReplaceChildInSameContainment : IContainmentCommand
	{
		int NewIndex; //Index
		string MovedChild; //TargetNode
		// string CommandId; //CommandId
		// ProtocolMessage? Message;
	}
	
	// Annotations
	class IAnnotationCommand : ISingleDeltaCommand {}
	class AddAnnotation: IAnnotationCommand
	{
		DeltaAnnotation Parent;
		DeltaSerializationChunk NewAnnotation;
		// string CommandId; //CommandId
		// ProtocolMessage? Message;
	}
	class DeleteAnnotation : IAnnotationCommand
	{
		DeltaAnnotation Parent;
		// string CommandId; //CommandId
		// ProtocolMessage? Message;
	}
	class ReplaceAnnotation : IAnnotationCommand
	{
		DeltaAnnotation Parent;
		DeltaSerializationChunk NewAnnotation;
		// string CommandId; //CommandId
		// ProtocolMessage? Message;
	}
	class MoveAnnotationFromOtherParent : IAnnotationCommand
	{
		DeltaAnnotation NewParent;
		string MovedAnnotation; //TargetNode
		// string CommandId; //CommandId
		// ProtocolMessage? Message;
	}
	class MoveAnnotationInSameParent : IAnnotationCommand
	{
		int NewIndex; // Index
		string MovedAnnotation; //TargetNode
		// string CommandId; //CommandId
		// ProtocolMessage? Message;
	}
	class MoveAndReplaceAnnotationFromOtherParent : IAnnotationCommand
	{
		DeltaAnnotation NewParent;
		string MovedAnnotation; // TargetNode
		// string CommandId; //CommandId
		// ProtocolMessage? Message;
	}
	class MoveAndReplaceAnnotationInSameParent : IAnnotationCommand
	{
		int NewIndex; // Index
		string MovedAnnotation; //TargetNode
		// string CommandId; //CommandId
		// ProtocolMessage? Message;
	}
	
	// References	
	class IReferenceCommand : IFeatureCommand {}	
	
	class ChangeReference : IReferenceCommand
	{
		DeltaReference Reference;
		SerializedReferenceTarget NewTarget;
		// string CommandId; //CommandId
		// ProtocolMessage? Message;
	}
	class MoveEntryFromOtherReference : IReferenceCommand
	{
		DeltaReference NewReference;
		DeltaReference OldReference;
		// string CommandId; //CommandId
		// ProtocolMessage? Message;
	}
	class MoveEntryFromOtherReferenceInSameParent : IReferenceCommand
	{
		string Parent; // TargetNode
		MetaPointer NewReference;
		int NewIndex; // INdex
		MetaPointer OldReference;
		int OldIndex; // Index
		// string CommandId; //CommandId
		// ProtocolMessage? Message;
	}
	class MoveEntryInSameReference : IReferenceCommand
	{
		string Parent; // TargetNode
		MetaPointer Reference;
		int NewIndex; // Index
		int OldIndex; // Index
		// string CommandId; //CommandId
		// ProtocolMessage? Message;
	}
	class MoveAndReplaceEntryFromOtherReference : IReferenceCommand
	{
		DeltaReference NewReference;
		DeltaReference OldReference;
		// string CommandId; //CommandId
		// ProtocolMessage? Message;
	}
	class MoveAndReplaceEntryFromOtherReferenceInSameParent : IReferenceCommand
	{		
		string Parent; // TargetNode
		MetaPointer NewReference;
		int NewIndex; // Index
		MetaPointer OldReference;
		int OldIndex;  // Index
		// string CommandId; //CommandId
		// ProtocolMessage? Message;
	}
	class MoveAndReplaceEntryInSameReference : IReferenceCommand
	{		
		string Parent; // TargetNode
		MetaPointer Reference;
		int NewIndex; // Index
		int OldIndex;  // Index
		// string CommandId; //CommandId
		// ProtocolMessage? Message;
	}
	class AddReferenceResolveInfo : IReferenceCommand
	{		
		DeltaReference Reference;
		string NewResolveInfo;
		// string CommandId; //CommandId
		// ProtocolMessage? Message;
	}
	class DeleteReferenceResolveInfo : IReferenceCommand
	{		
		DeltaReference Reference;
		// string CommandId; //CommandId
		// ProtocolMessage? Message;
	}
	class ChangeReferenceResolveInfo : IReferenceCommand
	{		
		DeltaReference Reference;
		string NewResolveInfo;
		// string CommandId; //CommandId
		// ProtocolMessage? Message;
	}
	class AddReferenceTarget : IReferenceCommand
	{		
		DeltaReference Reference;
		string NewTarget; //TargetNode
		// string CommandId; //CommandId
		// ProtocolMessage? Message;
	}
	class DeleteReferenceTarget : IReferenceCommand
	{		
		DeltaReference Reference;
		// string CommandId; //CommandId
		// ProtocolMessage? Message;
	}
	class ChangeReferenceTarget : IReferenceCommand
	{		
		DeltaReference Reference;
		string NewTarget; // TargetNode
		// string CommandId; //CommandId
		// ProtocolMessage? Message;
	}
	
	class CompositeCommand:  IDeltaCommand
	{
		List<ISingleDeltaCommand> Commands;
		// ProtocolMessage? Message;
	}

	
	// 3. Events -----
	
	class IDeltaEvent : IDeltaContent {}
	class ISingleDeltaEvent : IDeltaEvent
	{
		List<CommandSource> OriginCommands;
	}
	
	// 3.a Partitions
	class IPartitionEvent : ISingleDeltaEvent {}
	class PartitionAdded : IPartitionEvent
	{
		DeltaSerializationChunk NewPartition;
		// List<CommandSource> OriginCommands;
		// ProtocolMessage? Message;
	}
	class PartitionDeleted : IPartitionEvent
	{
		DeltaSerializationChunk DeletedPartition;
		// List<CommandSource> OriginCommands;
		// ProtocolMessage? Message;
	}
	
	// 3.b Nodes
	
	class  INodeEvent : ISingleDeltaEvent {}
	class ClassifierChanged : INodeEvent
	{
		string Node; // TargetNode
		MetaPointer NewClassifier; 
		MetaPointer OldClassifier;
		// List<CommandSource> OriginCommands;
		// ProtocolMessage? Message;
	}

	class IFeatureEvent : ISingleDeltaEvent
	{
		string Parent; // TargetNode
		MetaPointer Feature;
	}

	// 3.c Properties
	
	class  IPropertyEvent : IFeatureEvent
	{
		DeltaProperty Property;
		// string Parent; // TargetNode
		// MetaPointer Feature;
	}
	class PropertyAdded : IPropertyEvent
	{
		// DeltaProperty Property;
		string NewValue; // PropertyValue
		// List<CommandSource> OriginCommands;
		// ProtocolMessage? Message;
	}
	class PropertyDeleted : IPropertyEvent
	{
		// DeltaProperty Property;
		string OldValue; // PropertyValue
		// List<CommandSource> OriginCommands;
		// ProtocolMessage? Message;	
	}
	class PropertyChanged : IPropertyEvent
	{
		// DeltaProperty Property;
		string NewValue; // PropertyValue
		string OldValue; // PropertyValue
		// List<CommandSource> OriginCommands;
		// ProtocolMessage? Message;	
	}
	
	// 3.d Children
	
	class IContainmentEvent : IFeatureEvent 
	{
		MetaPointer Containment;
		// MetaPointer Feature;
	}
	
	
	class ChildAdded : IContainmentEvent
	{
		// DeltaContainment Containment;
		DeltaSerializationChunk NewChild;
		// List<CommandSource> OriginCommands;
		// ProtocolMessage? Message;	
		// string Parent; // TargetNode
		// MetaPointer Containment;
	}
	class ChildDeleted : IContainmentEvent
	{
		// DeltaContainment Containment;
		DeltaSerializationChunk DeletedChild;
		// List<CommandSource> OriginCommands;
		// ProtocolMessage? Message;	
		// string Parent; // TargetNode
		// MetaPointer Containment;
	}
	class ChildReplaced : IContainmentEvent
	{
		// DeltaContainment Containment;
		DeltaSerializationChunk NewChid;
		DeltaSerializationChunk ReplacedChild;
		// List<CommandSource> OriginCommands;
		// ProtocolMessage? Message;	
		// string Parent; // TargetNode
		// MetaPointer Containment;
	}
	class ChildMovedFromOtherContainment : IContainmentEvent
	{
		// DeltaContainment NewContainment;
		string ModelChild; // TargetNode
		DeltaContainment OldContainment;
		// List<CommandSource> OriginCommands;
		// ProtocolMessage? Message;	
		// string Parent; // TargetNode
		// MetaPointer Containment;
	}
	class ChildMovedFromOtherContainmentInSameParent : IContainmentEvent
	{
		MetaPointer NewContainment;
		int NewIndex; //Index
		string MovedChild; //TargetNode
		// string Parent; //TargetNode
		MetaPointer OldContainment;
		int OldIndex; //Index
		// List<CommandSource> OriginCommands;
		// ProtocolMessage? Message;	
		// string Parent; // TargetNode
		// MetaPointer Containment;
	}
	class ChildMovedInSameContainment : IContainmentEvent
	{
		int NewIndex; //Index
		string MovedChild; //TargetNode
		// string Parent; //TargetNode
		// MetaPointer Containment;
		int OldIndex; // Index
		// List<CommandSource> OriginCommands;
		// ProtocolMessage? Message;
		
		// string Parent; // TargetNode
		// MetaPointer Containment;		
	}
	class ChildMovedAndReplacedFromOtherContainment  : IContainmentEvent
	{
		DeltaContainment NewContainment;
		string MovedChild; //TargetNode
		DeltaContainment OldContainment;
		DeltaSerializationChunk ReplacedChild;
		// List<CommandSource> OriginCommands;
		// ProtocolMessage? Message;
		// string Parent; // TargetNode
		// MetaPointer Containment;		
	}
	class ChildMovedAndReplacedFromOtherContainmentInSameParent  : IContainmentEvent
	{
		MetaPointer NewContainment;
		int NewIndex; // Index
		string MovedChild; // TargetNode
		// string Parent; // TargetNode
		MetaPointer OldContainment;
		int OldIndex; // Index
		DeltaSerializationChunk ReplacedChild;
		// List<CommandSource> OriginCommands;
		// ProtocolMessage? Message;
		// string Parent; // TargetNode
		// MetaPointer Containment;		
	}
	class ChildMovedAndReplacedInSameContainment  : IContainmentEvent
	{
		int NewIndex; // Index
		string MovedChild; // TargetNode
		// string Parent; // TargetNode
		// MetaPointer Containment;
		int OldIndex; // Index
		DeltaSerializationChunk ReplacedChild;
		// List<CommandSource> OriginCommands;
		// ProtocolMessage? Message;
		// string Parent; // TargetNode
		// MetaPointer Containment;		
	}
	
	// 3.e Annotations
	
	class IAnnotationEvent : ISingleDeltaEvent 
	{
		string Parent; // Parent
	}	
	class AnnotationAdded : IAnnotationEvent
	{
		// DeltaAnnotation Parent;
		DeltaSerializationChunk NewAnnotation;
		// List<CommandSource> OriginCommands;
		// ProtocolMessage? Message;
	}
	class AnnotationDeleted : IAnnotationEvent
	{
		// DeltaAnnotation Parent;
		DeltaSerializationChunk DeletedAnnotation;
		// List<CommandSource> OriginCommands;
		// ProtocolMessage? Message;
	}
	class AnnotationReplaced : IAnnotationEvent
	{
		// DeltaAnnotation Parent;
		DeltaSerializationChunk NewAnnotation;
		DeltaSerializationChunk ReplacedAnnotation;
		// List<CommandSource> OriginCommands;
		// ProtocolMessage? Message;
	}
	class AnnotationMovedFromOtherParent : IAnnotationEvent
	{
		DeltaAnnotation NewParent;
		string MovedAnnotation; // TargetNode
		DeltaAnnotation OldParent;
		// List<CommandSource> OriginCommands;
		// ProtocolMessage? Message;
	}
	class AnnotationMovedInSameParent : IAnnotationEvent
	{
		int NewIndex; // Index
		string MovedAnnotation; // TargetNode
		// string Parent; // TargetNode
		int OldIndex; // Index
		// List<CommandSource> OriginCommands;
		// ProtocolMessage? Message;
	}
	class AnnotationMovedAndReplacedFromOtherParent : IAnnotationEvent
	{
		DeltaAnnotation NewParent;
		string MovedAnnotation; // TargetNode
		DeltaAnnotation OldParent;
		DeltaSerializationChunk ReplacedAnnotation;
		// List<CommandSource> OriginCommands;
		// ProtocolMessage? Message;
	}
	class AnnotationMovedAndReplacedInSameParent : IAnnotationEvent
	{
		int NewIndex; // Index
		string MovedAnnotation;	// TargetNode
		// string Parent; 	// TargetNode
		int OldIndex; // Index
		DeltaSerializationChunk ReplacedAnnotation;
		// List<CommandSource> OriginCommands;
		// ProtocolMessage? Message;
	}
	
	// 3.f References
	class IReferenceEvent : IFeatureEvent 
	{
		MetaPointer Reference;
		// MetaPointer Feature;
	}
	class ReferenceAdded : IReferenceEvent
	{
		// DeltaReference Reference;
		SerializedReferenceTarget NewTarget;
		// List<CommandSource> OriginCommands;
		// ProtocolMessage? Message;
		// string Parent; // TargetNode		
		// MetaPointer IReferenceEvent.Reference => Reference.Reference;
	}
	class ReferenceDeleted : IReferenceEvent
	{
		// DeltaReference Reference;
		SerializedReferenceTarget DeletedTarget;
		// List<CommandSource> OriginCommands;
		// ProtocolMessage? Message;
		// MetaPointer IReferenceEvent.Reference => Reference.Reference;
	}
	class ReferenceChanged : IReferenceEvent
	{
		// DeltaReference Reference;
		SerializedReferenceTarget NewTarget;
		SerializedReferenceTarget ReplacedTarget;
		// List<CommandSource> OriginCommands;
		// ProtocolMessage? Message;
		// MetaPointer IReferenceEvent.Reference => Reference.Reference;
	}
	class EntryMovedFromOtherReference : IReferenceEvent
	{
		DeltaReference NewReference;
		DeltaReference OldReference;
		SerializedReferenceTarget MovedEntry;
		// List<CommandSource> OriginCommands;
		// ProtocolMessage? Message;
		// MetaPointer IReferenceEvent.Reference => Reference.Reference;
	}
	class EntryMovedFromOtherReferenceInSameParent : IReferenceEvent
	{
		// string Parent; // TargetNode
		MetaPointer NewReference;
		int NewIndex; // Index
		MetaPointer OldReference;
		int OldIndex; // Index
		SerializedReferenceTarget MovedEntry;
		// List<CommandSource> OriginCommands;
		// ProtocolMessage? Message;
		// MetaPointer IReferenceEvent.Reference => Reference.Reference;
	}
	class EntryMovedInSameReference : IReferenceEvent
	{
		// string Parent; // TargetNode
		// MetaPointer Reference;
		int NewIndex; // Index
		int OldIndex; // Index
		SerializedReferenceTarget MovedEntry;
		// List<CommandSource> OriginCommands;
		// ProtocolMessage? Message;
	}
	class EntryMovedAndReplacedFromOtherReference : IReferenceEvent
	{
		DeltaReference NewReference;
		DeltaReference OldReference;
		SerializedReferenceTarget MovedEntry;
		SerializedReferenceTarget ReplacedEntry;
		// List<CommandSource> OriginCommands;
		// ProtocolMessage? Message;
	}
	class EntryMovedAndReplacedFromOtherReferenceInSameParent : IReferenceEvent
	{
		// string Parent; // TargetNode
		MetaPointer NewReference;
		int NewIndex; // Index
		MetaPointer OldReference;
		int OldIndex; // Index
		SerializedReferenceTarget MovedEntry;
		SerializedReferenceTarget ReplacedEntry;
		// List<CommandSource> OriginCommands;
		// ProtocolMessage? Message;
	}
	class EntryMovedAndReplacedInSameReference : IReferenceEvent
	{
		// string Parent; // TargetNode
		// MetaPointer Reference;
		int NewIndex; // Index
		int OldIndex; // Index
		SerializedReferenceTarget MovedEntry;
		SerializedReferenceTarget ReplacedEntry;
		// List<CommandSource> OriginCommands;
		// ProtocolMessage? Message;
	}
	class ReferenceResolveInfoAdded : IReferenceEvent
	{
		// DeltaReference Reference;
		string NewResolveInfo;
		string Target; // TargetNode
		// List<CommandSource> OriginCommands;
		// ProtocolMessage? Message;
	}
	class ReferenceResolveInfoDeleted : IReferenceEvent
	{
		// DeltaReference Reference;
		string Target; // TargetNode?
		string DeletedResolveInfo;
		// List<CommandSource> OriginCommands;
		// ProtocolMessage? Message;
	}
	class ReferenceResolveInfoChanged : IReferenceEvent
	{
		// DeltaReference Reference;
		string NewResolveInfo;
		string? Target; // TargetNode?
		string ReplacedResolveInfo;
		// List<CommandSource> OriginCommands;
		// ProtocolMessage? Message;
	}
	class ReferenceTargetAdded : IReferenceEvent
	{
		// DeltaReference Reference;
		string NewTarget; // Target
		string ResolveInfo;
		string ReplacedResolveInfo;
		// List<CommandSource> OriginCommands;
		// ProtocolMessage? Message;
	}
	class ReferenceTargetDeleted : IReferenceEvent
	{
		// DeltaReference Reference;
		string ResolveInfo;
		string DeletedTarget;  // Target
		// List<CommandSource> OriginCommands;
		// ProtocolMessage? Message;
	}
	class ReferenceTargetChanged : IReferenceEvent
	{
		// DeltaReference Reference;
		string NewTarget; // Target
		string? ResolveInfo;
		string ReplacedTarget; // TargetNode
		// List<CommandSource> OriginCommands;
		// ProtocolMessage? Message;
	}
	
	// 3.g Miscellaneus 
	
	class CompositeEvent : IDeltaEvent
	{
		List<ISingleDeltaEvent> Events;
		// ProtocolMessage? Message;
	}
	class NoOpEvent : ISingleDeltaEvent
	{
		// List<CommandSource> OriginCommands;
		// ProtocolMessage? Message;
	}
	class Error : ISingleDeltaEvent
	{
		string ErrorCode;
		// List<CommandSource> OriginCommands;
		// ProtocolMessage Message;
	}	
}
